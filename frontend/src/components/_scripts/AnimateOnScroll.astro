---

---

<script>
    let scrollDir: "up" | "down" = "down"
    let lastScrollY: number = scrollY

    // === [ TYPES ] ====================================================================
    type SectionThresholdType = { id: string, threshold: { low:number, high: number } }
    
    // === [ DATA AND IDS ] ====================================================================
    const sectionIds            = [ "hero", "summary", "work_experience", "education", "projects", "skills", "get_in_touch", "awards_and_recognition", "footer" ]
    const sectionLinks          = sectionIds.filter(( _, index ) => index !== 0 && index !== sectionIds.length - 1 ).map( id => `${id}_link` )
    const sectionsYThreshold: SectionThresholdType[]    
                                = sectionIds.map( id => ({
        id,
        threshold:  id === "hero" ?             { low: -700, high: 100 } :
                    id === "footer" ?           { low: 56,   high: 468 } :
                    id === "summary" ?          { low: -206, high: 618 } :
                    id === "work_experience" ?  { low: 39,   high: 780 } :
                                                { low: -136, high: 542 }
    }))

    const animatedSections      = sectionIds.map( _ => false )


    // === [ SECTION ANIMATE ] =========================================================== 

    const sectionAnimate = ( details: SectionThresholdType, onMeetup: () => void ) => {
        const div = document.getElementById(details.id) as HTMLElement
        const pos = div.getBoundingClientRect().y

        if( pos >= details.threshold.low && pos <= details.threshold.high )
            onMeetup()
    }

    const checkSectionInViewport = () => sectionsYThreshold.forEach(( section, index ) => {
        if( !animatedSections[index] ) {
            sectionAnimate(section, () => {
                (document.getElementById(section.id) as HTMLElement).animate({ opacity: 100 }, { duration: 600, fill: "forwards" })
                animatedSections[index] = true
            })
        }
    })

    addEventListener("scroll", () => {
        // SECTION ANIMATE --------------------
        checkSectionInViewport()

        // SIDEBAR TABS -----------------------
        scrollDir = (scrollY > lastScrollY) ? "down" : "up"
        lastScrollY = scrollY
    })
    checkSectionInViewport()


    // === [ SIDEBAR TABS ] ==================================================================
    const ACTIVE_SIDEBAR_LINK_CLASSNAME = "active-sidebar"

    const highlightSidebarTab = (id:string) => sectionLinks.forEach(link => {
        if(link === id) (document.getElementById(link) as HTMLElement).classList.add(ACTIVE_SIDEBAR_LINK_CLASSNAME)
        else            (document.getElementById(link) as HTMLElement).classList.remove(ACTIVE_SIDEBAR_LINK_CLASSNAME)
    })

    const observer: IntersectionObserver = new IntersectionObserver((entries) => 
        entries.forEach(entry => {
            if((scrollDir === "down" && entry.intersectionRatio >= 0.6 && entry.boundingClientRect.top >= 0) || (scrollDir === 'up' && entry.intersectionRatio >= 0.6 && entry.boundingClientRect.bottom <= window.innerHeight))
                highlightSidebarTab(`${entry.target.id}_link`)
        }), { threshold: 0.6 })

    sectionIds.forEach(id => observer.observe(document.getElementById(id) as HTMLElement))
</script>